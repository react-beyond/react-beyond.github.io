<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>React Beyond Blog</title>
        <link>https://react-beyond.github.io/blog</link>
        <description>React Beyond Blog</description>
        <lastBuildDate>Sun, 05 Nov 2023 10:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Announcing React Beyond]]></title>
            <link>https://react-beyond.github.io/blog/announcing-react-beyond</link>
            <guid>https://react-beyond.github.io/blog/announcing-react-beyond</guid>
            <pubDate>Sun, 05 Nov 2023 10:00:00 GMT</pubDate>
            <description><![CDATA[I've read on twitter recently how funny someone finds the royal 'we' when a solo developer creates a library and communicates from behind it. Funny it is, we made it.]]></description>
            <content:encoded><![CDATA[<p>I've read on twitter recently how funny someone finds the royal 'we' when a solo developer creates a library and communicates from behind it. Funny it is, <em>we</em> made it.</p>
<p>React Beyond, in a nutshell, is a simple tool letting you create higher-order components, which recursively re-apply themselves on the components in the result JSX. It seemlessly penetrates through component boundaries.</p>
<p>It feels magical, but really isn't magic. React is a functional library (set aside the hook discourse now). Functions, which return JSX, which reference other functions, which return JSX, and so on. This very fact makes it possible to not only create simple higher-order components, but ones with a recursive nature. It "infects" the entire tree under the component it's applied to.</p>
<h2 id="real-world-problems">Real-world problems</h2>
<p>React is lovely, but it has its annoyances.</p>
<ul>
<li>
<p>It all starts with the <code>className</code> prop... instead of <code>class</code> for <strike>no</strike> historical reasons.</p>
</li>
<li>
<p>Then you have the conditionals in JSX. As Ryan Florence said once, the "syntax disaster". JSX is brilliant in that it's not a template, so we don't have to put expressions in strings (which is ugly too), but breaking the XML hierarchy with JS language structures is just an illness.</p>
</li>
<li>
<p>Then you have the mandatory HOC wrappings in some state management libraries, which need to know the start-end points of the render phase. You might've seen the <code>observer()</code> HOC from MobX. And you might've been turned away by the necessity of wrapping all your component declarations in <code>observer()</code>.</p>
</li>
<li>
<p>Lastly, to me maybe the most annoying one, code like this:</p>
<pre><code class="language-jsx">&lt;Tooltip text="hi"&gt;
  &lt;Button onClick={() =&gt; alert('hi')}&gt;Hi&lt;/Button&gt;
&lt;/Tooltip&gt;
</code></pre>
<p>This is severely unintuitive. Why? Because it <em>obscuscates the containment logic</em>. It elevates a secondary feature above the main functionality. The app works without the tooltip, but not without the button. Still, the tooltip is the boss. The same applies to all kinds of floating components, and to some level, non-representational components too, like an ErrorBoundary.</p>
</li>
</ul>
<p>With React Beyond, you can get past these sorts of problems effortlessly.</p>
<p>But it turns out it provides a lot more than that. Heck, you can even create your own framework or renderer on top of React with it...</p>
<h2 id="prior-art">Prior art</h2>
<p>There has been many attempts actually to add directives to React, and the interest is definitely <a href="https://stackoverflow.com/questions/30408586/what-is-the-react-equivalent-of-an-angular-directive-that-only-works-on-attribut">there</a>, but these implementations are limited to a very narrow feature set, and are ill-born for different reasons. Let's see a few:</p>
<ul>
<li><a href="https://github.com/peakchen90/babel-plugin-react-directives">https://github.com/peakchen90/babel-plugin-react-directives</a> - Core Vue directives, but with a babel plugin.</li>
<li><a href="https://github.com/baeyun/directive-x">https://github.com/baeyun/directive-x</a> - Babel plugin...</li>
<li><a href="https://github.com/mkhstar/react-directive">https://github.com/mkhstar/react-directive</a> - Not a plugin, but the API is tortuous: <code>&lt;directive.div dirIf={...}&gt;</code>.</li>
<li><a href="https://github.com/laurci/react-directive-attributes">https://github.com/laurci/react-directive-attributes</a> - Overrides the React API, and it's bundler dependent.</li>
<li><a href="https://github.com/FullR/react-deep-map">https://github.com/FullR/react-deep-map</a> - This is something usable, and the project is not dead, but it doesn't step beyond the obvious limitation that it only works on a static element tree.</li>
</ul>
<p><em>React Beyond</em> doesn't need bundler plugins, and is free of shenanigans. It simply leverages the fact that React is a <em>functional</em> library. Note, that React Beyond <em>does</em> provide a bundler plugin for Hot Module Reloading to work, just like React does, but it's not necessary for its functionality.</p>]]></content:encoded>
        </item>
    </channel>
</rss>