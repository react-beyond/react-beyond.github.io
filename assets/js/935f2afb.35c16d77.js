"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"theSidebar":[{"type":"category","label":"Guide","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/guide/introduction","docId":"guide/introduction"},{"type":"link","label":"Getting Started","href":"/docs/guide/getting-started","docId":"guide/getting-started"},{"type":"link","label":"HMR / React Fast Refresh","href":"/docs/guide/hmr","docId":"guide/hmr"},{"type":"link","label":"Scoping","href":"/docs/guide/scoping","docId":"guide/scoping"},{"type":"link","label":"TypeScript","href":"/docs/guide/typescript","docId":"guide/typescript"},{"type":"link","label":"Usage Patterns","href":"/docs/guide/usage-patterns","docId":"guide/usage-patterns"},{"type":"link","label":"Directives","href":"/docs/guide/directives","docId":"guide/directives"}],"href":"/docs/category/guide"},{"type":"link","label":"API","href":"/docs/api/","docId":"api/api"},{"type":"category","label":"Gallery","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"deepClassForProp","href":"/docs/gallery/class-for","docId":"gallery/class-for"},{"type":"link","label":"deepClsxProp","href":"/docs/gallery/clsx-prop","docId":"gallery/clsx-prop"},{"type":"link","label":"deepErrorBoundary","href":"/docs/gallery/error-boundary","docId":"gallery/error-boundary"},{"type":"link","label":"deepHrefHandler","href":"/docs/gallery/href-handler","docId":"gallery/href-handler"},{"type":"link","label":"deepIfProp","href":"/docs/gallery/if-prop","docId":"gallery/if-prop"},{"type":"link","label":"deepLoaderProp","href":"/docs/gallery/loader-prop","docId":"gallery/loader-prop"},{"type":"link","label":"deepMenuProp","href":"/docs/gallery/menu-prop","docId":"gallery/menu-prop"},{"type":"link","label":"deepMobx","href":"/docs/gallery/mobx","docId":"gallery/mobx"},{"type":"link","label":"deepTooltipProp","href":"/docs/gallery/tooltip-prop","docId":"gallery/tooltip-prop"},{"type":"link","label":"deepTryCatch","href":"/docs/gallery/try-catch","docId":"gallery/try-catch"},{"type":"link","label":"deepTwProp","href":"/docs/gallery/tw-prop","docId":"gallery/tw-prop"},{"type":"link","label":"error-fallback","href":"/docs/gallery/error-fallback","docId":"gallery/error-fallback"},{"type":"link","label":"transpose","href":"/docs/gallery/transpose","docId":"gallery/transpose"}],"href":"/docs/category/gallery"}]},"docs":{"api/api":{"id":"api/api","title":"API","description":"createBeyondComponent(cmp, config)","sidebar":"theSidebar"},"gallery/class-for":{"id":"gallery/class-for","title":"deepClassForProp","description":"Transforms all `class` and `for` props to `className` and `htmlFor`.","sidebar":"theSidebar"},"gallery/clsx-prop":{"id":"gallery/clsx-prop","title":"deepClsxProp","description":"Transforms all `_clsx` prop on elements to `className` with clsx() applied.","sidebar":"theSidebar"},"gallery/error-boundary":{"id":"gallery/error-boundary","title":"deepErrorBoundary","description":"Wraps all components in the subtree in an ErrorBoundary.","sidebar":"theSidebar"},"gallery/error-fallback":{"id":"gallery/error-fallback","title":"error-fallback","description":"","sidebar":"theSidebar"},"gallery/href-handler":{"id":"gallery/href-handler","title":"deepHrefHandler","description":"Turns all <a href> elements into SPA links with a navigate callback.","sidebar":"theSidebar"},"gallery/if-prop":{"id":"gallery/if-prop","title":"deepIfProp","description":"Conditionally renders elements with an _if prop.","sidebar":"theSidebar"},"gallery/loader-prop":{"id":"gallery/loader-prop","title":"deepLoaderProp","description":"Renders a loader mask on top of elements with a truthy _loader prop.","sidebar":"theSidebar"},"gallery/menu-prop":{"id":"gallery/menu-prop","title":"deepMenuProp","description":"Provides a `_menu` prop which defines a popover menu as a ReactElement.","sidebar":"theSidebar"},"gallery/mobx":{"id":"gallery/mobx","title":"deepMobx","description":"Wraps all components in a mobx `observer` HOC.","sidebar":"theSidebar"},"gallery/tooltip-prop":{"id":"gallery/tooltip-prop","title":"deepTooltipProp","description":"Provides a `_tooltip` prop which will be fed into a render function to render a tooltip.","sidebar":"theSidebar"},"gallery/transpose":{"id":"gallery/transpose","title":"transpose","description":"","sidebar":"theSidebar"},"gallery/try-catch":{"id":"gallery/try-catch","title":"deepTryCatch","description":"Makes all component error tolerant with a fallback element.","sidebar":"theSidebar"},"gallery/tw-prop":{"id":"gallery/tw-prop","title":"deepTwProp","description":"Transforms all \\"_tw\\" prop on elements to \\"className\\" with clsx() applied.","sidebar":"theSidebar"},"guide/directives":{"id":"guide/directives","title":"Directives","description":"Prior art","sidebar":"theSidebar"},"guide/getting-started":{"id":"guide/getting-started","title":"Getting Started","description":"Installation","sidebar":"theSidebar"},"guide/hmr":{"id":"guide/hmr","title":"HMR / React Fast Refresh","description":"In order to use HMR with deep HOCs, you need to use a bundler plugin.","sidebar":"theSidebar"},"guide/introduction":{"id":"guide/introduction","title":"Introduction","description":"React Deephoc lets you define higher order components (HOCs) that are automatically applied to the entire subtree of the wrapped component, not just its direct JSX output. It walks through the resulting JSX tree and replaces all component elements with their wrapped versions. Its API provides a way to map all JSX elements, map all components, add magic props, and more.","sidebar":"theSidebar"},"guide/scoping":{"id":"guide/scoping","title":"Scoping","description":"React Deephoc doesn\'t add any global mechanism to the page. It strictly operates within the subtree of the component it\'s applied to.","sidebar":"theSidebar"},"guide/typescript":{"id":"guide/typescript","title":"TypeScript","description":"Those deep HOCs which add magic props to the elements universally, override the React type declarations to add the magic prop to the elements. For example:","sidebar":"theSidebar"},"guide/usage-patterns":{"id":"guide/usage-patterns","title":"Usage Patterns","description":"Multiple deep HOCs","sidebar":"theSidebar"}}}')}}]);